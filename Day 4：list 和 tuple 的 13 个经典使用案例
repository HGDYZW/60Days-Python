1. 判断 list 内有无重复元素
def is_duplicated(lst):
    for x in lst:
        if lst.count(x)>1:
            return True
    return False

a=[1,-2,3,4,1,2]
print(is_duplicated(a))
此方法不是很简洁
def is_duplicated(lst):
   return len(lst)!=len(set(lst))

a=[1,-2,3,4,1,2]
print(is_duplicated(a))
----------------------------------------------------------------------------------------------------------------
2. 列表反转
def reverse(lst):
    return lst[::-1]
a=[1,-2,3,4,1,2]
print(reverse(a))
-------------------------------------------------------------------------------------------------------------
3. 找出列表中的所有重复元素
遍历列表，如果出现次数大于 1，且不在返回列表 ret 中，则添加到 ret 中。
def find_duplicate(lst):
    ret = []
    for x in lst:
        if lst.count(x)>1 and x not in ret:
            ret.append(x)
    return ret
a=[1,2,3,4,1,2]
print(find_duplicate(a))
---------------------------------------------------------------------------------------------------------------
4. 斐波那契数列
普通实现版本
def fibonacci(n):
    if n <= 1:
        return[1]
    fib = [1,1]
    while len(fib)<n:
        fib.append(fib[len(fib) - 1] + fib[len(fib) - 2])
        
    return fib
r=fibonacci(5)
print(r)
生成器版本
def fibonacci(n):
    a,b=1,1
    for _ in range(n):
        yield a 
        a,b=b,a+b
print(list(fibonacci(5)))
----------------------------------------------------------------------------------------------------------------
5. 出镜最多
def mode(lst):
    if lst is None or len(lst)==0:
        return None
    return max (lst,key=lambda v:lst.count(v))

lst = [1, 3, 3, 2, 1, 1, 2]
r = mode(lst)
print(f'{lst} 中出现次数最多的元素为:{r}')
出镜最多的元素有多个时，按照以上方法，默认只返回一个。
def mode(lst):
    if lst is None or len(lst)==0:
        return None
    max_fre_elem = max(lst,key=lambda v: lst.count(v))
    max_fre = lst.count(max_fre_elem)
    ret = []
    for i in lst:
        if i not in ret and lst.count(i)==max_fre:
            ret.append(i)
    return ret

lst = [1, 3, 3, 3, 1, 1, 2]
r = mode(lst)
print(f'{lst} 中出现次数最多的元素为:{r}')
------------------------------------------------------------------------------------------------------------------------------------------------
6
#更长列表  
#带有一个*的参数为可变的位置参数，意味着能传入任意多个位置参数
def max_len(*lists):
    return max(*lists,key=lambda v: len (v))
r=max_len([1,2,3],[4,5,6,7],[8])
print(f' 更长的列表是{r}')
------------------------------------------------------------------------------------------------------------------------------------------------
7.求表头 
返回列表的第一个元素，注意列表为空时返回None
def head(lst):
    return lst[0] if len(lst)>0 else None
print(head([]))
print(head([1,23,4]))
------------------------------------------------------------------------------------------------------------------------------------------------
8.求表尾
求列表的最后一个元素，同样列表为空时返回None
def tali(lst):
    return lst[-1] if len(lst)>0 else None
print(tali([]))
print(tali([1,23,4]))
------------------------------------------------------------------------------------------------------------------------------------------------
9.打印乘法表
for i in range(1,10):
    for j in range(1,i+1):
        print(str(j)+str("*")+str(i)+"="+str(i*j),end="\t")
    print()
------------------------------------------------------------------------------------------------------------------------------------------------
10.元素对
t[:-1] :愿列表切掉最后一个元素
t[1:] :愿列表切掉第一个元素
zip(iter1,iter2):实现iter1和iter2上午对应索引处的元素拼接
def pair(t):
    return list(zip(t[:-1],t[1:]))
print(pair(range(10)))
------------------------------------------------------------------------------------------------------------------------------------------------
11.样本抽样
内置rando模块中，有一个sample函数，实现抽样功能

------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
