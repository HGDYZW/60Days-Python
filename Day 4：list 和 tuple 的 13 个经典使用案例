1. 判断 list 内有无重复元素
def is_duplicated(lst):
    for x in lst:
        if lst.count(x)>1:
            return True
    return False

a=[1,-2,3,4,1,2]
print(is_duplicated(a))
此方法不是很简洁
def is_duplicated(lst):
   return len(lst)!=len(set(lst))

a=[1,-2,3,4,1,2]
print(is_duplicated(a))
----------------------------------------------------------------------------------------------------------------
2. 列表反转
def reverse(lst):
    return lst[::-1]
a=[1,-2,3,4,1,2]
print(reverse(a))
-------------------------------------------------------------------------------------------------------------
3. 找出列表中的所有重复元素
遍历列表，如果出现次数大于 1，且不在返回列表 ret 中，则添加到 ret 中。
def find_duplicate(lst):
    ret = []
    for x in lst:
        if lst.count(x)>1 and x not in ret:
            ret.append(x)
    return ret
a=[1,2,3,4,1,2]
print(find_duplicate(a))
---------------------------------------------------------------------------------------------------------------
4. 斐波那契数列
普通实现版本
def fibonacci(n):
    if n <= 1:
        return[1]
    fib = [1,1]
    while len(fib)<n:
        fib.append(fib[len(fib) - 1] + fib[len(fib) - 2])
        
    return fib
r=fibonacci(5)
print(r)
生成器版本
def fibonacci(n):
    a,b=1,1
    for _ in range(n):
        yield a 
        a,b=b,a+b
print(list(fibonacci(5)))
----------------------------------------------------------------------------------------------------------------
5. 出镜最多
def mode(lst):
    if lst is None or len(lst)==0:
        return None
    return max (lst,key=lambda v:lst.count(v))

lst = [1, 3, 3, 2, 1, 1, 2]
r = mode(lst)
print(f'{lst} 中出现次数最多的元素为:{r}')
----------------------------------------------------------------------------------------------------------------
